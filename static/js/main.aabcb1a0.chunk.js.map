{"version":3,"sources":["components/MultiField/MultiField.tsx","components/Field/Field.tsx","components/Builder/builder.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MultiField","props","onChangeHandler","e","target","name","value","addFieldHandler","type","removeFieldHandler","field","state","this","builder","fieldType","placeholderHost","placeholderContainer","className","onClick","_","map","index","placeholder","key","onChange","id","Component","Field","Builder","mixpanelInit","userId","localStorage","getItem","mixpanel","window","uuidv4","setItem","identify","people","set","increment","track","setState","getDockerBuildCommand","fields","push","command","container","network","ports","length","i","enviornments","volumes","image","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aabcb1a0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { IBuilder } from '../../modals/IBuilder';\nimport { IPair } from '../../modals/IPair';\n\nimport * as _ from \"lodash\";\n interface MultiFieldState {\n  \n }\n\ninterface MultiFieldProps {\n    builder:IBuilder\n    fieldType:string\n    addFieldHandler(type: string): void,\n    removeFieldHandler(type:string, field:IPair): void,\n    onChangeHandler(name: string,value: string): void,\n\n    \n}\nclass MultiField extends Component<MultiFieldProps,MultiFieldState> {\n    constructor(props:any) {\n        super(props);\n        this.state = {\n              \n        }\n    }\n    onChangeHandler = (e:any)=>{\n         \n        this.props.onChangeHandler(e.target.name,e.target.value)\n         \n    }\n    addFieldHandler = (type:string)=>{\n        this.props.addFieldHandler(type)\n    \n\n    }\n\n    removeFieldHandler = (type:string, field:IPair)=>{\n       this.props.removeFieldHandler(type,field)\n       \n      }\n\n     \n    \n    render() {\n        const {builder, fieldType}=this.props\n        let placeholderHost=fieldType!==\"enviornments\"?\"Host\":\"Key\"\n        let placeholderContainer=fieldType!==\"enviornments\"?\"Container\":\"Value\"\n        \n         return (\n            <div>\n                <div className=\"mg-top-2 row\">\n                    <div className=\"col-sm-2 form-lb\"> \n                        {fieldType}\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <button type=\"button\" onClick={()=>this.addFieldHandler(fieldType)} className=\"btn btn-primary btn-sm\">\n                            +\n                        </button>\n\n                     </div>\n                 </div>\n\n                 \n             \n              {_.get(builder,fieldType,[]).map((field:IPair,index:number)=>{\n                return(\n                    <div key={field.id} className=\"mg-top-5 row\">\n                        {/* <div className=\"col-sm-\"> \n                        </div> */}\n                        <div className=\"col-sm-2\"> \n                            <input  placeholder={placeholderHost} type=\"text\" className=\"form-control form-control-sm\" value={field.key} name={fieldType+\"[\"+index+\"].key\"} onChange={this.onChangeHandler} ></input>\n                        </div>\n                        <div className=\"col-sm-2\"> \n                            <input placeholder={placeholderContainer} type=\"text\" className=\"form-control form-control-sm\" value={field.value} name={fieldType+\"[\"+index+\"].value\"} onChange={this.onChangeHandler} ></input>\n                        </div>\n                        <div className=\"col-sm-2\"> \n                            <button type=\"button\" onClick={()=>this.removeFieldHandler(fieldType,field)} className=\"btn btn-danger btn-sm\">\n                                -\n                            </button>\n                         </div>\n                    </div>\n \n                )\n            })}\n            <hr className=\"mt-2 mb-2\"></hr>\n        </div>\n    )\n    }\n}\n\nexport default MultiField;\n","import React, { Component } from 'react';\nimport { IBuilder } from '../../modals/IBuilder';\nimport * as _ from \"lodash\";\ninterface FieldState {\n  \n }\n\n interface FieldProps {\n    builder:IBuilder\n    fieldType:string\n    onChangeHandler(name: string,value: string): void\n    placeholder:string\n}\nclass Field extends Component<FieldProps,FieldState> {\n    constructor(props:any) {\n        super(props);\n        this.state = { \n        }\n    }\n    onChangeHandler = (e:any)=>{\n        this.props.onChangeHandler(e.target.name,e.target.value)\n    }\n   \n    render() {\n        const {builder, fieldType, placeholder}=this.props\n\n         return (\n        <div  className=\"row\">\n            <div className=\"col-sm-1 form-lb\">{fieldType}</div>\n            <div className=\"col-sm-4\"><input placeholder={placeholder} className=\"form-control form-control-sm\" type=\"text\" value={_.get(builder,fieldType+\".value\",\"\")} name={fieldType+\".value\"} onChange={this.onChangeHandler} ></input></div>\n              \n        </div>)\n    }\n}\n\nexport default Field;\n","import React, { Component } from 'react';\nimport { IBuilder } from '../../modals/IBuilder';\nimport { IPair } from '../../modals/IPair';\nimport * as _ from \"lodash\";\nimport { v4 as uuidv4 } from 'uuid';\nimport MultiField from '../MultiField/MultiField';\nimport Field  from \"../Field/Field\"\n\ninterface BuilderState {\n    builder:IBuilder,\n    command:string\n}\n\ninterface BuilderProps {\n}\nclass Builder extends Component<BuilderProps,BuilderState> {\n    constructor(props:any) {\n        super(props);\n        this.state = {\n            command:\"\",\n             builder: {\n                 image: {id:uuidv4(),key:\"\",value:\"\"} as IPair,\n                 container: {id:uuidv4(),key:\"\",value:\"\"} as IPair,\n                 network:{id:uuidv4(),key:\"\",value:\"\"} as IPair,\n                 ports: [{id:uuidv4(),key:\"\",value:\"\"} as IPair] as IPair[],\n                 volumes:[{id:uuidv4(),key:\"\",value:\"\"} as IPair] as IPair[],\n                 enviornments:[{id:uuidv4(),key:\"\",value:\"\"} as IPair] as IPair[],\n            } as IBuilder\n        }\n    }\n\n    componentDidMount(){\n        this.mixpanelInit()\n    }\n\n    mixpanelInit =()=>{\n        let userId=localStorage.getItem(\"userId\")\n        let mixpanel= (window as any).mixpanel;\n        debugger\n        if(userId==null){\n            userId=uuidv4()\n            localStorage.setItem(\"userId\",userId)\n        }\n        mixpanel.identify(userId);\n        mixpanel.people.set({ \"count\": 0 });\n        mixpanel.people.increment(\"count\", 1);\n        mixpanel.track(\n            \"App Launched\",\n            {}\n        );\n    }\n    onChangeHandler = (name:string,value:string)=>{\n        debugger\n        let {builder}=this.state  \n        _.set(builder, name, value)\n        this.setState({builder:builder},()=>{\n            this.getDockerBuildCommand()\n        })\n\n    }\n    addFieldHandler = (type:string)=>{\n\n      let {builder}=this.state\n      let fields=_.get(builder,type)\n      fields.push({id:uuidv4(),key:\"\",value:\"\"} as IPair)\n      _.set(builder, type, fields)\n      this.setState({builder:builder})\n    }\n\n    removeFieldHandler = (type:string, field:IPair)=>{\n        debugger\n        let {builder}=this.state\n        let fields=_.get(builder,type)\n        _.remove(fields, {\n            id: field.id\n        });\n        _.set(builder, type, fields)\n        this.setState({builder:builder})\n      }\n\n      getDockerBuildCommand=()=>{\n          debugger\n        let {builder}=this.state\n        let command=\"docker run\"\n        if(builder.container.value!==\"\"){\n            command = command + \" --name \" + builder.container.value\n        }\n\n        if(builder.network.value!==\"\"){\n            command = command + \" --network \" + builder.network.value\n        }\n\n        if(builder.ports.length>0){\n            for(let i=0;i<builder.ports.length;i++){\n                if(builder.ports[i].key!==\"\" && builder.ports[i].value!==\"\")\n                    command = command + \" -p \\\"\" + builder.ports[i].key + \"\\\":\\\"\" +  builder.ports[i].value +\"\\\"\"\n            }\n        }\n\n        if(builder.enviornments.length>0){\n            for(let i=0;i<builder.enviornments.length;i++){\n                if(builder.enviornments[i].key!==\"\" && builder.enviornments[i].value!==\"\")\n                    command = command + \" -e \\\"\" + builder.enviornments[i].key + \"\\\"=\\\"\" +  builder.enviornments[i].value +\"\\\"\"\n            }\n        }\n\n        if(builder.volumes.length>0){\n            for(let i=0;i<builder.volumes.length;i++){\n                if(builder.volumes[i].key!==\"\" && builder.volumes[i].value!==\"\")\n                    command = command + \" -v \\\"\" + builder.volumes[i].key + \"\\\":\\\"\" +  builder.volumes[i].value +\"\\\"\"\n            }\n        }\n\n        if(builder.image.value!==\"\"){\n            command = command + \" \" + builder.image.value\n        }\n        this.setState({command:command})        \n      }\n    \n    render() {\n        const {command,builder}=this.state  \n        return (\n        <div>\n             \n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-sm-5\"></div>\n                    <div className=\"col-sm\"><h3>Docker Command Builder</h3></div>\n                     \n                </div>\n                <Field placeholder=\"ex: nginx\" builder={builder} fieldType=\"image\" onChangeHandler={this.onChangeHandler}></Field>\n                <br/>\n                <Field placeholder=\"ex: webapp\" builder={builder} fieldType=\"container\" onChangeHandler={this.onChangeHandler}></Field>\n                 <br/>\n                <Field placeholder=\"ex: bridge or host\" builder={builder} fieldType=\"network\" onChangeHandler={this.onChangeHandler}></Field>\n\n                <br/>\n                <MultiField builder={builder} fieldType=\"ports\" onChangeHandler={this.onChangeHandler} removeFieldHandler={this.removeFieldHandler} addFieldHandler={this.addFieldHandler}></MultiField>\n                    \n                <br/>\n                \n                <MultiField builder={builder} fieldType=\"volumes\" onChangeHandler={this.onChangeHandler} removeFieldHandler={this.removeFieldHandler} addFieldHandler={this.addFieldHandler}></MultiField>\n                <br/>\n                <MultiField builder={builder} fieldType=\"enviornments\" onChangeHandler={this.onChangeHandler} removeFieldHandler={this.removeFieldHandler} addFieldHandler={this.addFieldHandler}></MultiField>\n                <br/>\n\n                <div className=\"row\">\n                    <div className=\"col-sm-6\"> \n                         <button type=\"button\" onClick={this.getDockerBuildCommand} className=\"btn btn-success\">Generate</button>\n                    </div>\n                    <div className=\"col-sm-6\"> \n                    </div>\n                </div>\n                <div className=\"row\">\n                    {command!==\"\"?  command:\"\"}\n                    {/* <div className=\"col-sm-12 \">\n\n                    <div className=\"tooltip\">{command!==\"\"?  command:\"\"}\n                        <span className=\"tooltiptext\">Click to copy</span>\n                    </div>\n\n                        <p className=\"tooltip Tooltip Text\"></p>\n                    </div> */}\n                </div>\n\n            </div>\n          \n           \n         </div>)\n    }\n}\n\nexport default Builder;\n","import React from 'react';\nimport './App.css';\nimport Builder from './components/Builder/builder';\nfunction App() {\n  return (\n    <div>\n      <Builder></Builder>\n     </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}